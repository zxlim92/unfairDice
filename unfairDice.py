# ---------------------
# Name: Zi Xue Lim
# ID:1573849
# CMPT274, Fall 2019
# Excercise Unfair Dice
# ---------------------
import random
def biased_rolls(prob_list, s, n):
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results.
    Arguments:
    prob_list: a list of the probabilities of rolling the
    number on each side of the m-sided die. The list
    will always have the length m (m >= 2), where m is
    the number of sides numbered 1 to m. Therefore,
    for example, the probability stored at index 0 in
    the list is the probability of rolling a 1 on
    the m-sided die.
    s: the seed to use when initializing the PRNG
    n: the number of rolls to return

    Return:
    rolls: a list (of length n) containing each of the n rolls of the
    biased die, in the order they were generated.
    """
    # replace this line and solve the problem!
    rolls = []  # empty list to store randomly generated rolls
    random.seed(s)
    mSide = len(prob_list)
    cumSumList = []
    cumSum = 0
    for i in range(0, mSide):  # makes a list of the cumaltive sum of the probablities
        cumSum = cumSum + prob_list[i]
        cumSumList.append(cumSum)
    for x in range(0, n):
        q = 0
        randVal = random.random()  # random value between 0-1
        while randVal > cumSumList[q]:  # finds the number the dice has rolled on # goes through the cumSum list untill the random number is less than the cum sum
            q = q+1
        rolls.append(q+1)
    # return the resulting rolls
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.
    Arguments:
    m (int): the number of sides on the die
    rolls (list): the list of rolls generated by the biased die
    width (int): the fixed width of the histogram, in characters
    (this is the length of the longest bar in the
    histogram, to maximize space in the chart)
    Returns:
    None (but prints the histogram to standard output)
    """
    maxNum = 0
    for x in range(0, m):  # find maxium number of a single number in rolls list
        countNum = rolls.count(x+1)
        if maxNum < countNum:
            maxNum = countNum
    numberStarPer = maxNum/width  # finds the numerical value of a star
    for i in range(0, m):  # plot the histogram
        amountNum = rolls.count(i+1)
        numStars = round(amountNum/numberStarPer)
        numDot = width - numStars
        print(str(i+1) + ": " + numStars*"*" + numDot*".")
    # solve the problem here by replacing the pass keyword
    pass
    # this function should print to standard output
    # you should not return anything!


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
    # print(biased_rolls([1/2, 1/4, 1/4],100,10))
    rolls = biased_rolls([1/3, 1/3, 1/3], 2**32-1, 1000)
    draw_histogram(3, rolls, 10)
    pass
